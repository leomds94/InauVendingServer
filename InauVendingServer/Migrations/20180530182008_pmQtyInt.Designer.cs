// <auto-generated />
using InauVendingServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace InauVendingServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180530182008_pmQtyInt")]
    partial class pmQtyInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InauVendingServer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InauVendingServer.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MachineAddress");

                    b.Property<string>("MachineDimension");

                    b.Property<string>("MachineManufacturer");

                    b.Property<string>("MachineModel");

                    b.Property<string>("MachineName");

                    b.Property<string>("MachineType");

                    b.Property<string>("MachineVoltage");

                    b.Property<short>("OwnerId");

                    b.HasKey("MachineId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("InauVendingServer.Models.MachineMaintenance", b =>
                {
                    b.Property<int>("MachineMaintenanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MachineId");

                    b.Property<decimal>("MaintenanceCost");

                    b.Property<short>("MaintenanceId");

                    b.Property<DateTime>("MaintenanceTime");

                    b.HasKey("MachineMaintenanceId");

                    b.HasIndex("MachineId");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("MachineMaintenance");
                });

            modelBuilder.Entity("InauVendingServer.Models.MachineSpot", b =>
                {
                    b.Property<int>("MachineSpotId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MachineId");

                    b.Property<string>("MachineSpotAddress");

                    b.Property<DateTime>("MachineSpotEndTime");

                    b.Property<string>("MachineSpotName");

                    b.Property<DateTime>("MachineSpotStartTime");

                    b.HasKey("MachineSpotId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineSpot");
                });

            modelBuilder.Entity("InauVendingServer.Models.Maintenance", b =>
                {
                    b.Property<short>("MaintenanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MaintenanceType");

                    b.HasKey("MaintenanceId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("InauVendingServer.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OrderInvoice");

                    b.Property<string>("OrderStatus");

                    b.Property<DateTime>("OrderTime");

                    b.Property<decimal>("OrderTotalPrice");

                    b.HasKey("OrderId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("InauVendingServer.Models.Owner", b =>
                {
                    b.Property<short>("OwnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OwnerAddress");

                    b.Property<string>("OwnerName");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("InauVendingServer.Models.PendingCommand", b =>
                {
                    b.Property<int>("PendingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductMachineId");

                    b.Property<int>("status");

                    b.HasKey("PendingId");

                    b.HasIndex("ProductMachineId");

                    b.ToTable("PendingCommand");
                });

            modelBuilder.Entity("InauVendingServer.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProductImage");

                    b.Property<string>("ProductName");

                    b.Property<string>("ProductType");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("InauVendingServer.Models.ProductMachine", b =>
                {
                    b.Property<int>("ProductMachineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MachineId");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductMachineIndex");

                    b.Property<decimal>("ProductMachinePrice");

                    b.Property<int>("ProductMachineQty");

                    b.HasKey("ProductMachineId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMachine");
                });

            modelBuilder.Entity("InauVendingServer.Models.ProductOrder", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("ProductMachineId");

                    b.Property<short>("ProductOrderQty");

                    b.HasKey("OrderId", "ProductMachineId");

                    b.HasIndex("ProductMachineId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("InauVendingServer.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductMachineId");

                    b.Property<short>("SupplyQty");

                    b.Property<string>("SupplyTime");

                    b.HasKey("SupplyId");

                    b.HasIndex("ProductMachineId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InauVendingServer.Models.Machine", b =>
                {
                    b.HasOne("InauVendingServer.Models.Owner", "Owner")
                        .WithMany("Machines")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.MachineMaintenance", b =>
                {
                    b.HasOne("InauVendingServer.Models.Machine", "Machine")
                        .WithMany("Maintenances")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InauVendingServer.Models.Maintenance", "Maintenance")
                        .WithMany("MachineMaintenances")
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.MachineSpot", b =>
                {
                    b.HasOne("InauVendingServer.Models.Machine", "Machine")
                        .WithMany("MachineSpots")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.PendingCommand", b =>
                {
                    b.HasOne("InauVendingServer.Models.ProductMachine", "ProductMachine")
                        .WithMany()
                        .HasForeignKey("ProductMachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.ProductMachine", b =>
                {
                    b.HasOne("InauVendingServer.Models.Machine", "Machine")
                        .WithMany("ProductMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InauVendingServer.Models.Product", "Product")
                        .WithMany("ProductMachines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.ProductOrder", b =>
                {
                    b.HasOne("InauVendingServer.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InauVendingServer.Models.ProductMachine", "ProductMachine")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductMachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InauVendingServer.Models.Supply", b =>
                {
                    b.HasOne("InauVendingServer.Models.ProductMachine", "ProductMachine")
                        .WithMany("Supplies")
                        .HasForeignKey("ProductMachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InauVendingServer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InauVendingServer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InauVendingServer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InauVendingServer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
